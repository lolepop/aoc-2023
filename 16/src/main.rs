#![feature(iter_intersperse)]
use std::collections::{VecDeque, HashSet};

use euclid::{Point2D, UnknownUnit, point2, Vector2D, vec2};
use rayon::prelude::*;

const INPUT: &str = r#"\.......-..|.....-.........\.|.\................................................-......................\.../..
...........|......\...\...-..-......................--.....|...........\....|./..........-../-......|....-.../
...|\...............................././............./......|....\/................/......../...........|...\.
........-............-......................|..|......................................|......................\
........../..................\............|......./............................-./....\.......................
.....-....-..\..|..|.-...\...\.........................../......-..--.......|..\......\...|.........|..../....
.........\.....|.....................................|.......|..........-.....................................
.......|..........|................................................-............-......../......|........./...
\.....-|............./........-.....\.....-......-....\...........-.........\..|............./................
.../......\...-...........-.......|...-......\-.........../......../..\..............-.............|..........
....|........................./..|.|......./....../.......-.......................\./.........................
.........\.......|/.........-...................\.......|..\...............|..../....-.....-..../.............
/..-........\..........................\-....|...\......\.............|../..-.....|...................../../..
............/|.......................|.............\...\.......\........../...........-./...................\.
.........../.-....\.\.....................\./............\...............................-.................\..
......\\.......-........-.|..........................-............-...........................................
............-....-.....|....\........|.............................../.........-|...|\..-...............|.....
............/...-....|....|......-..\..\.-............-./\.-.........|....//...............-.........-|.......
..............-............................-..................\\...\..\-..\................./.............\.\.
.../......|......../..../......../..\./..............|..../................/.........|...............././.....
.............\.|...|....-...-.........|.......\.....\.........\..-.......-...............\...\..\|..../.......
.......-..........\../..........................\......\../......\...-....|..../...|./..\............-.-......
.................\....-...................../.........-.......................-..............|................
..-\.............-..............-../.-../...../.......|..................|.......-................|.......\...
.......\|.-....\.../..................\......\....../..|-.........-.........|....\..................\........|
.....././...........\.-........-..-...\..........-\.............|.....|..-.........|...............|..........
..............-..|........./..\..|............-..........|......................./....................\-.\....
...................-..............................................-....-....|..............-.........|././.../
...\...........................|..\...................../..........-......./......./...............|..........
.......................-......../...-....../....../.....././.|.......\|......\..........-.../..-......./......
...\..............\../..|..-\........................../-....\........................../........./...|.|...-.
..........\...../...|.|.......\........./................\.......-.-.....|........|/..............\...........
..................\....\....|......\.......//.............../.|.\................../..........|..-............
.......\.\............./...............-....................../........................\./...................-
.........../....\...........|\./|...|................./...-........\.\.....\.....|......|....\...../..........
...........\.....|......|...........|............/............................................\/........../|..
..../......\\.................../.|.......|...--..\.-../\/.................|..................................
....................\....\..|................................\.........-...........-................|.........
.........................|...-......-.................\...............|\......./...--\........................
..../....|..|......\..\....................../|.....................\|............................-...|.......
\......./...../..............\......|...|.\....../.....|...................|...........\.......\.............\
...............|./..-..-|....\....-.................-................-.........../..\..-......................
..-.............................\.\-.................\...........-........|.......-..............-....../.....
........\.-.................../\..............-.|.................................\.|.........-..............|
...................................|..\.........|...-................./.......-.....-/.\..........\...\|......
./........-.......|......|../...-.\...........\.........|-............................-..-...\.....//......|..
..................-........\.../............................................./.....|......./....\........|....
..-|..........-......................|.\...............................\/........../.....|...............|....
...\......\.\.....|.........|...../.|../.............................|.....\./....../............./..\........
.......\..-.\...-//................-...........................-........\..../..................-.............
..../.................\..|..........\\.....-......................|-.................\.........|..............
..\.\...-..../........|..................................\...|-.././......\.\......./|......./-....-......-\..
-......................................-.......................\............\...............|.\.........\.....
../.-....../......................\..........................-..\......\.......|...\.-.....................|..
..-..-..\...............\-...............................\...............-........./......-.\............-....
.............--....\...-../........./-.......................\............................-...................
....-..............-\../-...........-......|\...............................|.........--........./......\../..
....-.\/.../.-.........|........./........-................\..............\.../........|............|.....--..
........\-...\...........|...\.......-\.....|-...........................................-|............\......
............./.-..........\....................\......\............\.../../.-...-.......-.....................
.......|\..........-....................|.|.../.-.|.\...\/....../...|..-./....................................
./.....\.-.../...\.......|.........../....................-.....................\|..\..|........|...\.........
.................|..........--..../..|............|..|.......-.....|.......-................\.................
.-.-.....|..|/..............................-...............-\....|..................\.|.....\.\...........|..
......................-\|-..\...|.............\................................../...\........\|..............
..........--\..\...........-...|........-......................\./..|.........................................
...........|.|.....|.....................|........./....-.......-.......|................\....................
....-..............\.....\....-........................\............--.............-.-...............//.......
\.......\..........|.\................................\......|.........-..|...................../.............
................\...\.....|...........-..|................\...........|.........|............|............../.
.................................-/........../....../..............|................../.../...\..../..........
.....\..\........|......|...................|............\..\................./....../............|.........|.
............................................|.........|...................|..\........-...........\...-/......
.......//-..........\........|......//................\..........-........|......\.......-.......\....-.......
-........\.......\.....--.........................-.............|..../.........../............/.......-..\.../
.....\|..../..-.\..-....|.-......|...................../..\...|/............/../.......\..............|..-.../
........-...........-.........|.....-.............................../.........-................../.\..-....\..
..................|......................|.\......\../....................../.-............././...........\...
.|....\.....\..........\.................\....\....................\....................\/......|............\
/...\..\......-...-...........................-.......\|....\............/..............................|.....
............|..\...../..-..|.........|..-..............-.....-\.........\.......-...................\...../..-
....../................./.........../..............-....|.......................\........................./...
....\..-......./............................................/.............|......./..-..\\........../..../....
.............................................|................./.......................|......|.............-.
........|......-................\.................|.|.-............/.......|...............|...........\......
............................................................|.../..............................\........|.....
....../....\.|.|\/|..............-....|......../.-....................-......|.-.......................\......
./......../....................../.../..............\..................\....\...-/............\...............
...-..../...\.|.....|.......|...........\......||..|.................................-.....................|..
/..-/........|.......................|..../-./................|................/.......|...-../...............
....../-..................|..|....-..|.......................|-......-..\...././..../-\....|......|..|........
...........-................\..........-..........................................-...........................
..|.................................|........................\...................|......\\....................
..../....../...-........//............-..................-..........................-...\................\....
......|...................|...../.............................-.................--.../...............|...|...\
....../...........\..|....-.|..|.............../-.................-.............|.....-..........\/......|....
......|.........../....\............./.........\......\...-.\.......|...-.....|./.....-........./.............
..\.|......../........-....|.-...................//|.........-...............|................................
...................................\............/..............-................/-......-........\.........-..
.-...-..|....|................|...|.........|.....//...../............\...............-.|.....................
../...............................\..............-..........-.................................................
...-..\....-...|/.............-......|/...-..|..-.........|...\..|../...|.....|.........................|...-.
....../.......\.......--.............../....\......................\...\..........................-...........
..-......-.......|....\|.../...-..-....|......\.|..............................-...............|...|..........
......-....../............-./.-.............\.-\/............../................................./............
..........--/..../..|...\.....\.....|.\...\.....................................\|......./............-|..-..\
..|......................../\........./.................\............-......-............/..........|....|.|..
.-|.....................-..-..\...............-...................|....../...........................\........
.................-.......\\.../........-.............\.......-......|\..........|....-..............\...../...
|.......|...\..................\../................|..\.................../..\......-..\.-................/..."#;

enum Tile {
    Empty,
    Vertial,
    Horizontal,
    DiagUp,
    DiagDown
}
impl Tile {
    fn reflect(&self, dir: Vector2D<i32, UnknownUnit>) -> Vec<Vector2D<i32, UnknownUnit>> {
        match self {
            Tile::Empty => vec![dir],
            Tile::Vertial => if dir.y == 0 { vec![vec2(0, -1), vec2(0, 1)] } else { vec![dir] },
            Tile::Horizontal => if dir.x == 0 { vec![vec2(-1, 0), vec2(1, 0)] } else { vec![dir] },
            Tile::DiagUp | Tile::DiagDown => {
                let diag_up_dir = if dir.x == 0 {
                    if dir.y > 0 {
                        vec2(-1, 0)
                    } else {
                        vec2(1, 0)
                    }
                } else if dir.x > 0 {
                    vec2(0, -1)
                } else {
                    vec2(0, 1)
                };

                match self {
                    Tile::DiagUp => vec![diag_up_dir],
                    Tile::DiagDown => vec![-diag_up_dir],
                    _ => unreachable!()
                }
            },
        }
    }
}

fn parse_input(input: &str) -> Vec<Vec<Tile>> {
    input.split("\n")
        .map(|l|
            l.chars()
                .map(|c|
                    match c {
                        '.' => Tile::Empty,
                        '|' => Tile::Vertial,
                        '-' => Tile::Horizontal,
                        '/' => Tile::DiagUp,
                        '\\' => Tile::DiagDown,
                        _ => unimplemented!()
                    }
                )
                .collect::<Vec<_>>()
        )
        .collect::<Vec<_>>()
}

fn solve(grid: &Vec<Vec<Tile>>, starting_pos: Point2D<i32, UnknownUnit>) -> usize {
    let starting_dir = if starting_pos.x == 0 {
        vec2(1, 0) // left edge
    } else if starting_pos.x as usize == grid[0].len() - 1 {
        vec2(-1, 0) // right edge
    } else if starting_pos.y == 0 {
        vec2(0, 1) // top edge
    } else {
        vec2(0, -1) // bottom edge
    };

    let mut queue: VecDeque<(Point2D<i32, UnknownUnit>, Vector2D<i32, UnknownUnit>)> = VecDeque::from([(starting_pos, starting_dir)]);
    let mut visited: HashSet<(Point2D<i32, UnknownUnit>, Vector2D<i32, UnknownUnit>)> = HashSet::new();

    while let Some((beam_pos, beam_dir)) = queue.pop_front() {
        // println!("{:?}", beam_pos);
        // check if beam position is outside of grid
        if beam_pos.x < 0 || beam_pos.y < 0 || visited.contains(&(beam_pos, beam_dir)) {
            continue;
        }
        if let Some(beam_tile) = grid.get(beam_pos.y as usize).and_then(|r| r.get(beam_pos.x as usize)) {
            visited.insert((beam_pos, beam_dir));
            for new_beam_dir in beam_tile.reflect(beam_dir) {
                queue.push_front((beam_pos + new_beam_dir, new_beam_dir));
            }
        }
    }

    let real_visited = visited.iter().map(|(a, _)| a).collect::<HashSet<_>>();
    real_visited.len()
}

fn solve_a(grid: &Vec<Vec<Tile>>) {
    let solution = solve(grid, point2(0, 0));
    println!("{solution}");
}

fn solve_b(grid: &Vec<Vec<Tile>>) {
    let a = (0..grid[0].len()).into_par_iter().flat_map(|x|
        vec![solve(&grid, point2(x as i32, 0)), solve(grid, point2(x as i32, grid.len() as i32 - 1))]
    );
    let b = (0..grid.len()).into_par_iter().flat_map(|y|
        vec![solve(&grid, point2(0, y as i32)), solve(grid, point2(grid[0].len() as i32 - 1, y as i32))]
    );
    let solution = a.chain(b).max().unwrap();
    println!("{solution}");
}

fn main() {
    let grid = parse_input(INPUT);
    solve_a(&grid);
    solve_b(&grid);
}
